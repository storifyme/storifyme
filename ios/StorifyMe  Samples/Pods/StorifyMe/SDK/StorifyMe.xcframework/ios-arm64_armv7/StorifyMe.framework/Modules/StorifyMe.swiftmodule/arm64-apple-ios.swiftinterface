// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StorifyMe
import Foundation
@_exported import StorifyMe
import Swift
import UIKit
import WebKit
import _Concurrency
public struct StorifyMeSettings {
  public init(accountId: Swift.String, accessToken: Swift.String, usetWidgetId: Swift.String, color: UIKit.UIColor? = nil)
}
@_hasMissingDesignatedInitializers public class InitializeStoryView {
  public static func createStoryView(parentView: UIKit.UIView, settings: StorifyMe.StorifyMeSettings) -> StorifyMe.StoriesCollectionView
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StoeifyMeSingleton {
  public static var shared: StorifyMe.StoeifyMeSingleton
  public var settings: StorifyMe.StorifyMeSettings!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoriesCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) weak public var eventDelegate: StorifyMe.StoryEventProtocol?
  @_Concurrency.MainActor(unsafe) public func load()
  @_Concurrency.MainActor(unsafe) public func setWidgetConfig(config: StorifyMe.WidgetConfig)
  @_Concurrency.MainActor(unsafe) public func refreshStoryData()
  @objc deinit
}
extension StorifyMe.StoriesCollectionView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension StorifyMe.StoriesCollectionView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var eventDelegate: StorifyMe.StoryEventProtocol? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setWidgetConfig(config: StorifyMe.WidgetConfig)
  @_Concurrency.MainActor(unsafe) public func load()
  @objc deinit
}
public protocol StoryEventProtocol : AnyObject {
  func onLoad(stories: [StorifyMe.StoryModel])
  func onFail(error: Swift.Error)
  func onStoryOpened(story: StorifyMe.StoryModel, index: Swift.Int)
  func onStoryClose(story: StorifyMe.StoryModel)
}
public struct WidgetConfig {
  public init()
  public mutating func setQueryParameter(name: Swift.String, value: Swift.String)
  public mutating func setSegments(tags: [Swift.String])
}
public struct StoryModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
